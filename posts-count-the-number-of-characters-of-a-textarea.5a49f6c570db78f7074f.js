(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{hYfS:function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),r=t.n(a),c=t("TJpk"),m=t("mcK/"),l=t("Ov9x"),s=t("2G++");n.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(c.Helmet,null,r.a.createElement("meta",{name:"keywords",content:"display number of characters, maxlength attribute"})),r.a.createElement(l.a,{content:"\n假设我们有一个`文本区`和一个普通的 `div` 元素来显示用户输入了多少字符:\n\n~~~ html\n<textarea id=\"message\"></textarea>\n<div id=\"counter\"></div>\n~~~\n\n## 使用 `maxlength` 属性\n\n`maxlength` 属性设置用户可以在文本区域中输入的最大字符数\n\n~~~ html\n<textarea maxlength=\"200\" id=\"message\"></textarea>\n~~~\n\n## 计算字符的数量\n\n处理元素的 value 值更改时触发的 `input` 事件: \n\n~~~ javascript\nconst messageEle = document.getElementById('message');\nconst counterEle = document.getElementById('counter');\n\nmessageEle.addEventListener('input', function(e) {\n    const target = e.target;\n\n    // 获取 `maxlength` 属性\n    const maxLength = target.getAttribute('maxlength');\n\n    // 计算当前的字符数\n    const currentLength = target.value.length;\n\n    counterEle.innerHTML = `${currentLength}/${maxLength}`;\n});\n~~~\n\n> ## 很高兴知道\n>\n> 常见的错误是捕获 `keyup` 事件。在默写情况下将不会工作, 例如: \n> * 用户拖拽文本到文本区域中\n> * 用户鼠标右击，在上下文菜单中选择 `粘贴`\n"}),r.a.createElement(m.a,{src:"/demo/count-the-number-of-characters-of-a-textarea/index.html"}),r.a.createElement(s.a,{slugs:["attach-or-detach-an-event-handler","get-or-set-the-html-of-an-element","get-set-and-remove-attributes"]}))}}}]);
//# sourceMappingURL=posts-count-the-number-of-characters-of-a-textarea.5a49f6c570db78f7074f.js.map