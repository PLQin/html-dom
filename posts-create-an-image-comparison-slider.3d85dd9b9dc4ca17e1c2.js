(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{owAV:function(e,n,t){"use strict";t.r(n);var i=t("q1tI"),o=t.n(i),s=t("TJpk"),a=t("mcK/"),d=t("Ov9x"),r=t("2G++");n.default=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(s.Helmet,null,o.a.createElement("meta",{name:"keywords",content:"\n            addEventListener, getBoundingClientRect, image comparison slider, mousedown event, mousemove event,\n            mouseup event, previous sibling, previousElementSibling, next sibling, nextElementSibling,\n            set css style, set element width\n        "})),o.a.createElement(d.a,{content:"\nIn this post, we'll create a slider for comparing two imges visually. The slider has three elements organized as below:\n\n~~~ html\n<div class=\"container\">\n    \x3c!-- Show the modified image --\x3e\n    <div class=\"modified-image\"></div>\n\n    \x3c!-- The resizer --\x3e\n    <div class=\"resizer\" id=\"dragMe\"></div>\n\n    \x3c!-- The original image --\x3e\n    <img src=\"/path/to/original/image.png\" />\n</div>\n~~~\n\n## The markup\n\nInitially, the modified image will take half width of the container. It's positioned absolutely to the container:\n\n~~~ css\n.container {\n    position: relative;\n}\n.modified-image {\n    /* Absolute position */\n    left: 0;\n    position: absolute;\n    top: 0;\n\n    /* Take full height and half width of container */\n    height: 100%;\n    width: 50%;\n}\n~~~\n\nWe don't use the `img` tag to display the modified image here because the image could be scaled. Instead, we use the modified\nimage as the background of modified element:\n\n~~~ html\n<div\n    class=\"modified-image\"\n    style=\"background-image: url('/path/to/modified/image.png')\"\n>\n</div>\n~~~\n\nThe modified element uses more styles for showing the background image at desired position:\n\n~~~ css\n.modified-image {\n    background-position: top;\n    background-repeat: no-repeat;\n    background-size: auto 100%;\n    ...\n}\n~~~\n\nIt's a lot easier to set the position for the resizer. It is displayed at the center of container:\n\n~~~ css\n.resizer {\n    /* Absolute position */\n    left: 50%;\n    position: absolute;\n    top: 0;\n\n    /* Size */\n    height: 100%;\n    width: 2px;\n\n    /* Background */\n    background-color: #cbd5e0;\n\n    /* Indicate that it can be resized */\n    cursor: ew-resize;\n}\n~~~\n\n## Handle the events\n\nWhen user moves the resizer, we calculate how far the mouse has been moved. Then set the position for the modified and resizer elements\nbased on the current mouse position.\n\nFor more information about the idea, you can look at the [create resizable split views](/create-resizable-split-views) post.\nHere is the piece of code:\n\n~~~ javascript\n// Query the element\nconst resizer = document.getElementById('dragMe');\nconst leftSide = resizer.previousElementSibling;\n\n// The current position of mouse\nlet x = 0;\nlet y = 0;\n\n// The width of modified element\nlet leftWidth = 0;\n\n// Handle the mousedown event\n// that's triggered when user drags the resizer\nconst mouseDownHandler = function(e) {\n    // Get the current mouse position\n    x = e.clientX;\n    y = e.clientY;\n    leftWidth = leftSide.getBoundingClientRect().width;\n\n    // Attach the listeners to `document`\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n};\n\nconst mouseMoveHandler = function(e) {\n    // How far the mouse has been moved\n    const dx = e.clientX - x;\n    const dy = e.clientY - y;\n\n    let newLeftWidth = (leftWidth + dx) * 100 / resizer.parentNode.getBoundingClientRect().width;\n    newLeftWidth = Math.max(newLeftWidth, 0);\n    newLeftWidth = Math.min(newLeftWidth, 100);\n\n    // Set the width for modified and resizer elements\n    leftSide.style.width = `${newLeftWidth}%`;\n    resizer.style.left = `${newLeftWidth}%`;\n};\n\n// Attach the handler\nresizer.addEventListener('mousedown', mouseDownHandler);\n~~~\n\nWhen user moves the mouse around, we have to make sure that the mouse isn't moved to out of the container.\nThat's why we have to compare the `newLeftWidth` with 0 and 100 percentages:\n\n~~~ javascript\nconst mouseMoveHandler = function(e) {\n    ...\n\n    newLeftWidth = Math.max(newLeftWidth, 0);\n    newLeftWidth = Math.min(newLeftWidth, 100);\n};\n~~~\n\nBelow is the demo that you can play with.\n\n_Photo by [frank mckenna](https://unsplash.com/@frankiefoto) on [Unsplash](https://unsplash.com/photos/OD9EOzfSOh0)_\n"}),o.a.createElement(a.a,{src:"/demo/create-an-image-comparison-slider/index.html"}),o.a.createElement(r.a,{slugs:["attach-or-detach-an-event-handler","create-a-range-slider","create-resizable-split-views","get-siblings-of-an-element","make-a-draggable-element","set-css-style-for-an-element"]}))}}}]);
//# sourceMappingURL=posts-create-an-image-comparison-slider.3d85dd9b9dc4ca17e1c2.js.map