(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{c3LK:function(e,n,t){"use strict";t.r(n);var i=t("q1tI"),o=t.n(i),s=t("TJpk"),a=t("mcK/"),r=t("Ov9x"),l=t("2G++");n.default=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(s.Helmet,null,o.a.createElement("meta",{name:"keywords",content:"\n            addEventListener, getBoundingClientRect, mousedown event, mousemove event, mouseup event, \n            previous sibling, previousElementSibling, next sibling, nextElementSibling, range input,\n            range slider, set css style, set element width\n        "})),o.a.createElement(r.a,{content:"\nThis post introduces two popular ways to create a range slider.\n\n## 1. Use a `range` input\n\nHTML provides a built-in `range` input:\n\n~~~ html\n<input type=\"range\" />\n~~~\n\nIt's supported in mordern browsers, IE 10 and later. But there're some limitations such as:\n* You can't customize the knob\n* At the time of writing this, the vertical-oriented slider [isn't supported](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range#Browser_compatibility) \nin all mordern browsers\n\nJump to the next section if you want to have a customizable slider.\n\n> ## Tip\n> \n> Using the similar technique mentioned in this [post](/check-if-the-native-date-input-is-supported), we can check if the `range` input\n> is supported or not:\n>\n> ~~~ javascript\n> const isRangeInputSupported = function() {\n>     const ele = document.createElement('input');\n>     ele.setAttribute('type', 'range');\n>     // If the browser doesn't support the `range` input,\n>     // the `type` attribute will be reverted back to `text`\n>     return ele.type !== 'text';\n> };\n> ~~~\n\n## 2. Create a customizable range slider\n\nA slider is a combination of three parts: a knob, and two sides located at the left and right of the knob.\n\n~~~ html\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"knob\" id=\"knob\"></div>\n    <div class=\"right\"></div>\n</div>\n~~~\n\nThese parts are placed in the same row. The right element takes the available width. So, we can use the following styles\nto build the layout:\n\n~~~ css\n.container {\n    /* Content is centered horizontally */\n    align-items: center;\n    display: flex;\n\n    /* Size */\n    height: 1.5rem;\n}\n.right {\n    /* Take the remaining width */\n    flex: 1;\n    height: 2px;\n}\n~~~\n\nYou can take a look at the demo to see the full styles of elements.\n\n> ## Resource\n>\n> This [page](https://csslayout.io/patterns/slider) demonstrates the simplest layout for a range slider\n\n### Handle the events\n\nThe idea of making the knob [draggable](/make-a-draggable-element) is quite simple:\n\n* Handle the knob's `mousedown` event. The handler stores the mouse position:\n\n~~~ javascript\n// Query the element\nconst knob = document.getElementById('knob');\nconst leftSide = knob.previousElementSibling;\n\n// The current position of mouse\nlet x = 0;\nlet y = 0;\nlet leftWidth = 0;\n\n// Handle the mousedown event\n// that's triggered when user drags the knob\nconst mouseDownHandler = function(e) {\n    // Get the current mouse position\n    x = e.clientX;\n    y = e.clientY;\n    leftWidth = leftSide.getBoundingClientRect().width;\n\n    // Attach the listeners to `document`\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n};\n~~~\n\n* When the knob is moving, based on the current and original mouse position, we know how far the mouse has been moved.\nWe then set the width for the left side:\n\n~~~ javascript\nconst mouseMoveHandler = function(e) {\n    // How far the mouse has been moved\n    const dx = e.clientX - x;\n    const dy = e.clientY - y;\n\n    const containerWidth = knob.parentNode.getBoundingClientRect().width;\n    let newLeftWidth = (leftWidth + dx) * 100 / containerWidth;\n    newLeftWidth = Math.max(newLeftWidth, 0);\n    newLeftWidth = Math.min(newLeftWidth, 100);\n\n    leftSide.style.width = `${newLeftWidth}%`;\n};\n~~~\n\nThere're more small things that aren't listed in this post since you can see them in the demo's source.\nBut I always recommend to cleanup everything when the handlers aren't used:\n\n~~~ javascript\n// Triggered when user drops the knob\nconst mouseUpHandler = function() {\n    ...\n\n    // Remove the handlers of `mousemove` and `mouseup`\n    document.removeEventListener('mousemove', mouseMoveHandler);\n    document.removeEventListener('mouseup', mouseUpHandler);\n};\n~~~\n\nEnjoy the demo!\n"}),o.a.createElement(a.a,{src:"/demo/create-a-range-slider/index.html"}),o.a.createElement(l.a,{slugs:["attach-or-detach-an-event-handler","create-an-image-comparison-slider","create-resizable-split-views","get-siblings-of-an-element","make-a-draggable-element","set-css-style-for-an-element"]}))}}}]);
//# sourceMappingURL=posts-create-a-range-slider.d51a3af2c4f3947a90f5.js.map