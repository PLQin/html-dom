(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"rzs+":function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),r=t.n(a),l=t("TJpk"),i=t("mcK/"),u=t("Ov9x"),c=t("2G++");n.default=function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(l.Helmet,null,r.a.createElement("meta",{name:"keywords",content:"addEventListener, 事件绑定, input event, 表单事件, keypress event, preventDefault, selectionEnd, selectionStart, setSelectionRange"})),r.a.createElement(u.a,{content:'\n在这个例子里, 我们将强制用户只输入给定集合中的字符。具体地说, 这个演示中支持的字符在包括数字和空格。当然，您也可以将这个想法用在其他属性。\n\n这是我们的 input 元素 :\n\n~~~ html\n<input type="text" id="input" />\n~~~\n\n## 1. 绑定事件\n\n通过绑定 `keypress` 事件，我们可以防止用户输入数字和空格以外的字符\n\n~~~ javascript\nconst ele = document.getElementById(\'input\');\n\nele.addEventListener(\'keypress\', function(e) {\n    // 得到 keyCode\n    const key = e.which || e.keyCode;\n\n    // 0, 1, ..., 9, ..., 48, 49, ..., 57, 都对应着不同的按键\n    // 空格的keyCode是 32\n    if (key != 32 && (key < 48 || key > 57)) {\n        // 阻止默认操作\n        e.preventDefault();\n    }\n});\n~~~\n\n上面的代码看起来不错，但还不够，因为用户仍然可以将不支持的字符粘贴或拖动到 `input` 中。这些情况可以通过 `input` 事件来处理:\n\n~~~ javascript\n// 保存当前值\nlet currentValue = ele.value || \'\';\n\nele.addEventListener(\'input\', function(e) {\n    const target = e.target;\n\n    // 如果用户输入支持的字符(数字或空格)\n    /^[0-9\\s]*$/.test(target.value)\n        // 备份当前值\n        ? currentValue = target.value\n        // 否则，还原值\n        // 注意在这种情况下, `e.preventDefault()` 不起作用\n        : target.value = currentValue;\n});\n~~~\n\n在上面的代码中，我们检查值是否与正则表达式 ` /^[0-9\\s]*$/ `匹配。\n\n它修复了用户从键盘粘贴 (`Ctrl + V`)、右键粘贴或将文本拖拽放入的情况。\n\n但还有一个问题。调用 `target.value = currentValue` 将把光标放在输入的末尾。\n我们必须保持光标的位置。\n\n~~~ javascript\n// 跟踪光标当前的位置\nconst selection = {};\n\nele.addEventListener(\'keydown\', function(e) {\n    const target = e.target;\n    selection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n    };\n});\n~~~\n\n当用户更改 `input` 值时，如果不支持该值，我们将同时重置该值和光标位置:\n\n~~~ javascript\nele.addEventListener(\'input\', function(e) {\n    const target = e.target;\n\n    if (/^[0-9s]*$/.test(target.value)) {\n        currentValue = target.value;\n    } else {\n        // 用户输入不支持的字符\n        // 重置该值和光标位置\n        target.value = currentValue;\n        target.setSelectionRange(\n            selection.selectionStart,\n            selection.selectionEnd\n        );\n    }\n});\n~~~\n\n我们可以将跟踪的属性( `value`, `selectionStart` 和 `selectionEnd` )合并到一个变量中\n请参阅最后的演示。\n\n## 2. 使用特殊输入\n\n我们可以使用特殊的HTML 5输入服务于特定的用例:\n\n| `input`                     | 描述                       |\n|-------------------------------|-----------------------------------|\n| `<input type="color" />`    | 让用户指定一个颜色          |\n| `<input type="date" />`     | 让用户选择一个日期             |\n| `<input type="email" />`    | 让用户输入邮箱地址   |\n| `<input type="number" />`   | 让用户输入数值       |\n| `<input type="tel" />`      | 让用户输入号码 |\n| `<input type="time" />`     | 让用户输入时间             |\n| `<input type="url" />`      | 让用户输入 URL 地址              |\n\n您可以探索更多的内置类型 [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#%3Cinput%3E_types).\n\n在我们的具体例子中, `<input type="number" />` 没有作业，因为它不允许输入一个空格。\n'}),r.a.createElement(i.a,{src:"/demo/allow-to-enter-particular-characters-only"}),r.a.createElement(c.a,{slugs:["attach-or-detach-an-event-handler","prevent-the-default-action-of-an-event"]}))}}}]);
//# sourceMappingURL=posts-allow-to-enter-particular-characters-only.8bc177b42f4db9503a71.js.map